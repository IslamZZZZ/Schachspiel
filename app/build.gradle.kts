/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    //alias(libs.plugins.kotlin.jvm)
    id("org.jetbrains.kotlin.jvm") version "1.9.21"

    // Apply the application plugin to add support for building a CLI application in Java.
    //application
    id("jacoco")
    id("org.jetbrains.compose") version "1.6.1"
}

kotlin {
    jvmToolchain(21)  // ✅ Correct way to specify JVM target
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
}


tasks.withType<JacocoReport> {
    reports {
        xml.required.set(true)  // ✅ XML for CI/CD
        csv.required.set(false) // ❌ Disable CSV
        html.required.set(true) // ✅ HTML report
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.21")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.9.21")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3")

    implementation(compose.desktop.currentOs)


    implementation("com.google.guava:guava:32.1.0-jre")


    // ✅ Fix JUnit test imports
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5:1.9.21")  // ✅ Ensure Kotlin test framework is correct
}


compose.desktop {
    application {
        mainClass = "MainKt"
    }
}


tasks.named<JacocoReport>("jacocoTestReport") {
    dependsOn(tasks.test)  // Ensure tests run before generating the report
}


tasks.build {
    dependsOn("test", "jacocoTestReport")  // ✅ Runs tests + coverage
}

testing {
    suites {
        val test by getting(JvmTestSuite::class) {
            useJUnitJupiter()  // ✅ Use standard JUnit 5 runner
        }
    }
}


// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

